name: Application Build and Deploy
on:
  push:
    branches:
      - release

permissions:
  id-token: write
  contents: read 

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'nodejs-crud-ecs' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'nodejs-crud-repo' }}     
  
  ECS_CLUSTER: nodejs-crud-ecs-cluster
  ECS_SERVICE: nodejs-crud-ecs-service


jobs:
  lint_and_scan:
    name: Code Quality and Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install
        working-directory: ./

      - name: Run ESLint (Code Quality Check)
        run: npm run lint
        
      - name: Run NPM Audit (Vulnerability Scan)
        run: npm audit --audit-level=high

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: lint_and_scan 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image and tagging with :${{ github.sha }}"
          # Build context is the root, using the Dockerfile located there
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          
          echo "Tagging image as :latest"
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          echo "Pushing images to ECR"
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Force new deployment on ECS
        run: |
          # Use the derived cluster and service names from the environment variables
          echo "Triggering force-new-deployment for ECS service ${{ env.ECS_SERVICE }}"
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
          
          echo "Deployment triggered successfully."
